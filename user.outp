// Headers
#include <cstdint>
// Models
/* Flash command */
struct ISP_FLASH_CMD{
	/* Preflash on 0: no effect 1: flash delay counter is started at next trigger event, No capture */;
	uint32_t preflash_on:25;
	/* Flash on 0: no effect 1: flash delay counter is started at next trigger event A capture event is signaled to the sensor interface block */;
	bool flash_on:1;
	uint32_t align:6;
};

void ISP_FLASH_CMD_s_preflash_on(uint32_t preflash_on){
	ioctl(fd, IOCTL_S_preflash_on, preflash_on);
};

uint32_t ISP_FLASH_CMD_g_preflash_on(){
	ioctl(fd, IOCTL_G_preflash_on);
};

void ISP_FLASH_CMD_s_flash_on(bool flash_on){
	ioctl(fd, IOCTL_S_flash_on, flash_on);
};

bool ISP_FLASH_CMD_g_flash_on(){
	ioctl(fd, IOCTL_G_flash_on);
};

/* Flash config */
struct ISP_FLASH_CONFIG{
	/* Preflash on 0: no effect 1: flash delay counter is started at next trigger event, No capture */;
	uint8_t fl_cap_delay:4;
	/* Flash on 0: no effect 1: flash delay counter is started at next trigger event A capture event is signaled to the sensor interface block */;
	bool fl_trig_src:1;
	/* Flash on 0: no effect 1: flash delay counter is started at next trigger event A capture event is signaled to the sensor interface block */;
	bool fl_pol:1;
	/* Flash on 0: no effect 1: flash delay counter is started at next trigger event A capture event is signaled to the sensor interface block */;
	bool fl_trig_pol:1;
	/* Flash on 0: no effect 1: flash delay counter is started at next trigger event A capture event is signaled to the sensor interface block */;
	bool prelight_mode:1;
	uint32_t align:24;
};

void ISP_FLASH_CONFIG_s_fl_cap_delay(uint8_t fl_cap_delay){
	ioctl(fd, IOCTL_S_fl_cap_delay, fl_cap_delay);
};

uint8_t ISP_FLASH_CONFIG_g_fl_cap_delay(){
	ioctl(fd, IOCTL_G_fl_cap_delay);
};

void ISP_FLASH_CONFIG_s_fl_trig_src(bool fl_trig_src){
	ioctl(fd, IOCTL_S_fl_trig_src, fl_trig_src);
};

bool ISP_FLASH_CONFIG_g_fl_trig_src(){
	ioctl(fd, IOCTL_G_fl_trig_src);
};

void ISP_FLASH_CONFIG_s_fl_pol(bool fl_pol){
	ioctl(fd, IOCTL_S_fl_pol, fl_pol);
};

bool ISP_FLASH_CONFIG_g_fl_pol(){
	ioctl(fd, IOCTL_G_fl_pol);
};

void ISP_FLASH_CONFIG_s_fl_trig_pol(bool fl_trig_pol){
	ioctl(fd, IOCTL_S_fl_trig_pol, fl_trig_pol);
};

bool ISP_FLASH_CONFIG_g_fl_trig_pol(){
	ioctl(fd, IOCTL_G_fl_trig_pol);
};

void ISP_FLASH_CONFIG_s_prelight_mode(bool prelight_mode){
	ioctl(fd, IOCTL_S_prelight_mode, prelight_mode);
};

bool ISP_FLASH_CONFIG_g_prelight_mode(){
	ioctl(fd, IOCTL_G_prelight_mode);
};


